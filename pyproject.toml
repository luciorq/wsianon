[project]
name = "wsianon"
dynamic = [ "version" ]
description = "Whole Slide Imaging Anonymization Library"
authors = [
  { name = "luciorq", email = "luciorqueiroz@gmail.com" },
  { name = "EMPAIA" },
]
maintainers = [
  { name = "luciorq", email = "luciorqueiroz@gmail.com" },
]
readme = { file = "README.md", content-type = "text/markdown" }
license = "MIT"
license-files = [
  "LICENSE.txt",
  "include/LICENSE.txt",
]
keywords = [
  "digital pathology",
  "pathology",
  "whole slide imaging",
  "anonymization",
  "de-identification",
]
classifiers = [
  # "Development Status :: 4 - Beta",A
  "Development Status :: 3 - Alpha",
  "Programming Language :: Python",
  # "Programming Language :: Python :: 3.8",
  # "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  #  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Scientific/Engineering :: Image Processing",
  "Topic :: Scientific/Engineering :: Image Recognition",
  "Topic :: Scientific/Engineering :: Medical Science Apps.",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Education",
  # TODO: @luciorq newer setuptools complains about license classifiers
  # +  setuptools.errors.InvalidConfigError: License classifiers have been superseded by license expressions (see https://peps.python.org/pep-0639/). Please remove:
  # "License :: OSI Approved :: MIT License",
]

# Follow Spec 0?
# requires-python = ">=3.8"
requires-python = ">=3.10"

dependencies = []

[project.optional-dependencies]
cli = [
  "rich",
  "click",
]

[dependency-groups]
examples = [
  "jupyter",
]
docs = [
  "mkdocs-material",
]
tests = [
  "pytest",
  "openslide-python",
  "openslide-bin",
  "tiffslide",
]
lint = [
  "ruff",
  "rumdl",
]

[project.scripts]
wsianon = "wsianon.wsianon:main"

[project.urls]
homepage = "https://github.com/luciorq/wsianon#readme"
source = "https://github.com/luciorq/wsianon"
download = "https://github.com/luciorq/wsianon/releases"
# changelog = "https://github.com/luciorq/wsianon/blob/main/CHANGELOG.md"
# releasenotes = "https://github.com/luciorq/wsianon/releases"
documentation = "https://github.com/luciorq/wsianon#readme"
issues = "https://github.com/luciorq/wsianon/issues"
# funding = ""

# ============== END of project table ========================

[build-system]
requires = [
  "setuptools>=80",
  "setuptools-scm>=8"
]
build-backend = "setuptools.build_meta"

[tool.setuptools]
ext-modules = [
{ name = "wsianon.libwsianon", sources = [
  "include/aperio-flavor-io.c",
  "include/b64.c",
  "include/buf.c",
  "include/conf.c",
  # "include/console-app.c",
  "include/enc.c",
  "include/hamamatsu-io.c",
  "include/huff.c",
  "include/ini-parser.c",
  "include/isyntax-io.c",
  # "include/js-file.c",
  "include/mirax-io.c",
  "include/native-file.c",
  "include/philips-based-io.c",
  "include/philips-tiff-io.c",
  "include/tiff-based-io.c",
  "include/utils.c",
  "include/ventana-io.c",
  # "include/wsi-anonymizer-wasm.c",
  "include/wsi-anonymizer.c"
], language = "c" }
]

[tool.setuptools_scm]
version_file = "src/wsianon/__about__.py"

[tool.pytest.ini_options]
addopts = "--doctest-modules"


[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-arm64", "osx-64"]

[tool.pixi.dependencies]
pip = ">=25.2,<26"

[tool.pixi.pypi-dependencies]
wsianon = { path = ".", editable = true }
# wsianon = { path = ".", editable = true, extras = ["cli"] }

[tool.pixi.environments]
default = { solve-group = "default" }
cli = { features = ["cli"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }
examples = { features = ["examples"], solve-group = "default" }
tests = { features = ["tests"], solve-group = "default" }
lint = { features = ["lint"], solve-group = "default" }

[tool.pixi.tasks]

